import tkinter as tk

# Define the DFA class
class DFA:
    def __init__(self, transitions, start_state, accept_states):
        self.transitions = transitions
        self.start_state = start_state
        self.accept_states = accept_states
        self.current_state = start_state

    def reset(self):
        self.current_state = self.start_state

    def process_input(self, input_string):
        self.reset()
        for char in input_string:
            if char in self.transitions[self.current_state]:
                self.current_state = self.transitions[self.current_state][char]
            else:
                self.current_state = None
                break

    def is_accepted(self):
        return self.current_state in self.accept_states


# Function to check if the input string is accepted by the DFA
def check_string():
    input_string = entry_input.get()
    dfa.process_input(input_string)

    if dfa.is_accepted():
        result_label.config(text="Accepted", fg="green")
    else:
        result_label.config(text="Rejected", fg="red")

    visualize_dfa(input_string)


# Function to visualize the DFA
def visualize_dfa(input_string):
    canvas.delete("all")
    x_offset = 50
    y_offset = 100
    radius = 30

    states = {
        'q0': (x_offset, y_offset),
        'q1': (x_offset + 150, y_offset),
        'q2': (x_offset + 300, y_offset - 70),
        'q3': (x_offset + 300, y_offset + 70)
    }

    # Draw states
    for state, (x, y) in states.items():
        color = "green" if state in dfa.accept_states else "white"
        canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill=color, outline="black")
        canvas.create_text(x, y, text=state)

    # Draw transitions
    canvas.create_line(states['q0'][0] + radius, y_offset, states['q1'][0] - radius, y_offset, arrow=tk.LAST)
    canvas.create_line(states['q1'][0] + radius, y_offset, states['q2'][0] - radius, states['q2'][1] + radius, arrow=tk.LAST)
    canvas.create_line(states['q2'][0] - radius, states['q2'][1] + radius, states['q3'][0] - radius, states['q3'][1] - radius, arrow=tk.LAST)
    canvas.create_line(states['q3'][0] - radius, states['q3'][1] - radius, states['q1'][0] + radius, y_offset, arrow=tk.LAST)

    # Label transitions
    canvas.create_text((states['q0'][0] + states['q1'][0]) / 2, y_offset - 10, text="1")
    canvas.create_text((states['q1'][0] + states['q2'][0]) / 2, y_offset - 35, text="0")
    canvas.create_text((states['q2'][0] + states['q3'][0]) / 2, y_offset + 45, text="1")
    canvas.create_text((states['q3'][0] + states['q1'][0]) / 2, y_offset + 35, text="0")

    # Highlight current state
    if dfa.current_state:
        current_state_pos = states[dfa.current_state]
        canvas.create_oval(current_state_pos[0] - radius, current_state_pos[1] - radius, current_state_pos[0] + radius,
                           current_state_pos[1] + radius, outline="blue", width=2)


# Set up the DFA
# DFA that accepts binary strings with at least one '1' followed by '0'
transitions = {
    'q0': {'0': 'q0', '1': 'q1'},
    'q1': {'0': 'q2', '1': 'q1'},
    'q2': {'0': 'q2', '1': 'q3'},
    'q3': {'0': 'q2', '1': 'q1'}
}
start_state = 'q0'
accept_states = {'q2'}

dfa = DFA(transitions, start_state, accept_states)

# Set up the main window
root = tk.Tk()
root.title("DFA Visualizer")

# Input field and label
label_input = tk.Label(root, text="Enter a binary string:")
label_input.grid(row=0, column=0, padx=10, pady=10)

entry_input = tk.Entry(root, width=30)
entry_input.grid(row=0, column=1, padx=10, pady=10)

# Button to check string
check_button = tk.Button(root, text="Check String", command=check_string)
check_button.grid(row=0, column=2, padx=10, pady=10)

# Label to show result
result_label = tk.Label(root, text="", font=("Helvetica", 12))
result_label.grid(row=1, column=0, columnspan=3, pady=10)

# Canvas for DFA visualization
canvas = tk.Canvas(root, width=400, height=300)
canvas.grid(row=2, column=0, columnspan=3, pady=20)

# Run the application
root.mainloop()